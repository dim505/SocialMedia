using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Dapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json.Linq;
using SocialMedia.model;
using WebApplication3.Modal;

namespace SocialMedia.Controller
{
	[Route("api/[controller]")]
	[ApiController]
	[Authorize]

	public class ProfileController : ControllerBase
	{



		private readonly IConfiguration _config;

		public ProfileController(IConfiguration config)
		{
			_config = config;


		}


		//function used to get auth0ID for signed in user 
		public string GetUserAuth0ID()
		{

			string LoginUserIdentifier = "";

			try
			{
				//gets the login token from Auth0
				return LoginUserIdentifier = User.FindFirst(ClaimTypes.NameIdentifier).Value;
			}
			catch (Exception)
			{
				return LoginUserIdentifier = "";


			}

		}


		//function used to get DB string for User 
		public string GetDbConnString()
		{

			return _config["ConnectionStrings:DefaultConnection"];


		}






	}

}

[HttpGet]
[Route("[action]")]
public IActionResult GetProfileStats()
{

	string ConnStr = GetDbConnString();
	string LoggedInUser = GetUserAuth0ID();
	List<ProfileStats> profileStats = new List<ProfileStats>();
	using (IDbConnection db = new SqlConnection(ConnStr))
	{

		string SqlStr = @"select (select count(*) as NumberOfLikedComments from SM_LikedComments where Auth0IDWhoLikedComm = @LoggedInUser) as NumberOfLikedComments,
                                                (select count(*) as NumOfFollowing from SM_Follow_Following_Table where FollowerAuth0ID = @LoggedInUser) as SM_Follow_Following_Table, 
                                                (select count(*) as NumOfFollowers from SM_Follow_Following_Table where FollowingAuth0ID = @LoggedInUser) as NumOfFollowers";
		profileStats = db.Query<ProfileStats>(SqlStr, new { LoggedInUser = new DbString { Value = LoggedInUser, IsFixedLength = false, IsAnsi = true } }).ToList();
	}
	return Ok(profileStats);




}

/*

[HttpPost]
[Route("[action]/{id}/{TypeOFPicture}")]
public async Task<IActionResult> Add_Update_ProfileImage([FromRoute]string id, [FromRoute]string TypeOFPicture, [FromForm]IFormFile body)
{

   string ConnStr = GetDbConnString();
   string LoggedInUser = GetUserAuth0ID();
   byte[] fileBytes;
   using (MemoryStream memoryStream = new MemoryStream())
   {
       await body.CopyToAsync(memoryStream);
       fileBytes = memoryStream.ToArray();
   }


   string filename = body.FileName;
   string contentType = body.ContentType;

   using (IDbConnection db = new SqlConnection(ConnStr))
   {
       string SqlStr = @"select count(*) from SM_Account_Pictures where Auth0ID = @Auth0ID and  TypeOfPic = @TypeOfPic";
       List<Count> counts = new List<Count>();
       counts = db.Query<Count>(SqlStr, new { Auth0ID = new DbString { Value = LoggedInUser, IsFixedLength = false, IsAnsi = true }, TypeOfPic = new DbString { Value = TypeOFPicture, IsFixedLength = false, IsAnsi = true } }).ToList();

       if (counts[0].count == 0)
       {
           SqlStr = @"insert into SM_Account_Pictures values (@Image, @FileName,@Contenttype, @Auth0ID, @TypeOfPic, @ImageGuid)";
           int result = db.Execute(SqlStr, new
           {
               Image = fileBytes,
               FileName = filename,
               Contenttype = contentType,
               Auth0ID = LoggedInUser,
               TypeOfPic = TypeOFPicture,
               ImageGuid = id,
           });


       }
       else
       {

           SqlStr = @"Update SM_Account_Pictures
                               set image = @image,	
                                   filename = @filename,
                                   contentType = @contentType,
                                   --Auth0ID = @Auth0ID,
                                   --TypeOfPic = @TypeOfPic,
                                   ImageGuid = @ImageGuid
                           where Auth0ID = @Auth0ID and  TypeOfPic = @TypeOfPic";
           int result = db.Execute(SqlStr, new

           {
               Image = fileBytes,
               FileName = filename,
               Contenttype = contentType,
               Auth0ID = LoggedInUser,
               TypeOfPic = TypeOFPicture,
               ImageGuid = id,
           });


       }





   }
   return Ok();


}


*/
















// GET: api/Home
[HttpGet]
public IEnumerable<string> Get()
{
	return new string[] { "value1", "value2" };
}

// GET: api/Home/5
[HttpGet("{id}", Name = "Get")]
public string Get(int id)
{
	return "value";
}

// POST: api/Home
[HttpPost]
public void Post([FromBody] string value)
{
}

// PUT: api/Home/5
[HttpPut("{id}")]
public void Put(int id, [FromBody] string value)
{
}

// DELETE: api/ApiWithActions/5
[HttpDelete("{id}")]
public void Delete(int id)
{
}
    }


}
