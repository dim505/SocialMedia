      

        /*API CALLS FOR THE PROFILE SECTION */
        [HttpPost]
        [Route("[action]")]
        public IActionResult Add_Update_Account_Info([FromBody] JObject data)
        {
            string ConnStr = GetDbConnString();
            string LoggedInUser = GetUserAuth0ID();
            AccountInfo accountInfo = data["AccountInfo"].ToObject<AccountInfo>();
            using (IDbConnection db = new SqlConnection(ConnStr))
            {
                string Sql = @"select count(*) from SM_Account_Info where Auth0ID = @LoggedInUser";
                List<Count> accountInfoCounts = new List<Count>();
                accountInfoCounts = db.Query<Count>(Sql, new { LoggedInUser = new DbString { Value = LoggedInUser, IsFixedLength = false, IsAnsi = true } }).ToList();

                if (accountInfoCounts[0].count == 0)
                {

                    Sql = @"insert into SM_Account_Info values (@FullName, @Tagline, @CompanyName, @Twitter, @Facebook, @WebAddress, @Auth0ID)";
                    int result = db.Execute(Sql, new
                    {

                        FullName = accountInfo.FullName,
                        Tagline = accountInfo.Tagline,
                        CompanyName = accountInfo.CompanyName,
                        Twitter = accountInfo.Twitter,
                        Facebook = accountInfo.Facebook,
                        WebAddress = accountInfo.WebAddress,
                        Auth0ID = accountInfo.Auth0ID
                    });

                }
                else if (accountInfoCounts[0].count == 1)
                {

                    Sql = @" Update SM_Account_Info	
                                set FullName = @FullName,
                                Tagline = @Tagline,
                                CompanyName = @CompanyName,
                                Twitter = @Twitter,
                                Facebook = @Facebook,
                                WebAddress = @WebAddress
                                where  Auth0ID = @Auth0ID ";

                    int result = db.Execute(Sql, new
                    {

                        FullName = accountInfo.FullName,
                        Tagline = accountInfo.Tagline,
                        CompanyName = accountInfo.CompanyName,
                        Twitter = accountInfo.Twitter,
                        Facebook = accountInfo.Facebook,
                        WebAddress = accountInfo.WebAddress,
                        Auth0ID = accountInfo.Auth0ID

                    });

                }

            }
            return Ok();
        }

        [HttpGet]
        [Route("[action]")]
        public IActionResult GetProfileStats()
        {

            string ConnStr = GetDbConnString();
            string LoggedInUser = GetUserAuth0ID();
            List<ProfileStats> profileStats = new List<ProfileStats>();
            using (IDbConnection db = new SqlConnection(ConnStr))
            {

                string SqlStr = @"select (select count(*) as NumberOfLikedComments from SM_LikedComments where Auth0IDWhoLikedComm = @LoggedInUser) as NumberOfLikedComments,
                                                (select count(*) as NumOfFollowing from SM_Follow_Following_Table where FollowerAuth0ID = @LoggedInUser) as SM_Follow_Following_Table, 
                                                (select count(*) as NumOfFollowers from SM_Follow_Following_Table where FollowingAuth0ID = @LoggedInUser) as NumOfFollowers";
                profileStats = db.Query<ProfileStats>(SqlStr, new { LoggedInUser = new DbString { Value = LoggedInUser, IsFixedLength = false, IsAnsi = true } }).ToList();
            }
            return Ok(profileStats);




        }



        [HttpPost]
        [Route("[action]/{id}/{TypeOFPicture}")]
        public async Task<IActionResult> Add_Update_ProfileImage([FromRoute]string id, [FromRoute]string TypeOFPicture, [FromForm]IFormFile body)
        {

            string ConnStr = GetDbConnString();
            string LoggedInUser = GetUserAuth0ID();
            byte[] fileBytes;
            using (MemoryStream memoryStream = new MemoryStream())
            {
                await body.CopyToAsync(memoryStream);
                fileBytes = memoryStream.ToArray();
            }


            string filename = body.FileName;
            string contentType = body.ContentType;

            using (IDbConnection db = new SqlConnection(ConnStr))
            {
                string SqlStr = @"select count(*) from SM_Account_Pictures where Auth0ID = @Auth0ID and  TypeOfPic = @TypeOfPic";
                List<Count> counts = new List<Count>();
                counts = db.Query<Count>(SqlStr, new { Auth0ID = new DbString { Value = LoggedInUser, IsFixedLength = false, IsAnsi = true }, TypeOfPic = new DbString { Value = TypeOFPicture, IsFixedLength = false, IsAnsi = true } }).ToList();

                if (counts[0].count == 0)
                {
                    SqlStr = @"insert into SM_Account_Pictures values (@Image, @FileName,@Contenttype, @Auth0ID, @TypeOfPic, @ImageGuid)";
                    int result = db.Execute(SqlStr, new
                    {
                        Image = fileBytes,
                        FileName = filename,
                        Contenttype = contentType,
                        Auth0ID = LoggedInUser,
                        TypeOfPic = TypeOFPicture,
                        ImageGuid = id,
                    });


                }
                else
                {

                    SqlStr = @"Update SM_Account_Pictures
	                                    set image = @image,	
		                                    filename = @filename,
		                                    contentType = @contentType,
		                                    --Auth0ID = @Auth0ID,
		                                    --TypeOfPic = @TypeOfPic,
		                                    ImageGuid = @ImageGuid
                                    where Auth0ID = @Auth0ID and  TypeOfPic = @TypeOfPic";
                    int result = db.Execute(SqlStr, new

                    {
                        Image = fileBytes,
                        FileName = filename,
                        Contenttype = contentType,
                        Auth0ID = LoggedInUser,
                        TypeOfPic = TypeOFPicture,
                        ImageGuid = id,
                    });


                }





            }
            return Ok();


        }




        /* *******************PEOPLE SECTION ***************************************/

        [HttpGet]
        [Route("[action]")]
        public IActionResult FindPeople()
        {
            string ConnStr = GetDbConnString();
            string LoggedInUser = GetUserAuth0ID();
            List<FindPeople> findPeoples = new List<FindPeople>();
            using (IDbConnection db = new SqlConnection(ConnStr))
            {
                string SqlStr = @"select top 30 FullName, Auth0ID from SM_Account_Info ORDER BY NEWID()";
                findPeoples = db.Query<FindPeople>(SqlStr).ToList();
            };

            return Ok(findPeoples);
        }


        [HttpPost]
        [Route("[action]/{PersonToFollow}")]
        public IActionResult FollowPerson([FromRoute] string PersonToFollow)
        {
            string ConnStr = GetDbConnString();
            string LoggedInUser = GetUserAuth0ID();
            using (IDbConnection db = new SqlConnection(ConnStr))
            {
                string SqlStr = @"insert into SM_Follow_Following_Table values (@FollowerAuth0ID, @FollowingAuth0ID, @DateFollowed, @UserNotified)";
                int result = db.Execute(SqlStr, new
                {
                    FollowerAuth0ID = LoggedInUser,
                    FollowingAuth0ID = PersonToFollow,
                    DateFollowed = DateTime.Now.ToString(),
                    UserNotified = 'N'
                }

                    );
            }
            return Ok();
        }


        [HttpDelete]
        [Route("[action]/{UnfollowPerson}")]
        public IActionResult DeleteFollowPerson([FromRoute] string UnfollowPerson)
        {
            string ConnStr = GetDbConnString();
            string LoggedInUser = GetUserAuth0ID();
            using (IDbConnection db = new SqlConnection(ConnStr))
            {
                string SqlStr = @"Delete from SM_Follow_Following_Table where FollowerAuth0ID = @LoggedInUser and FollowingAuth0ID = @UnfollowPerson";
                int result = db.Execute(SqlStr, new
                {
                    LoggedInUser = LoggedInUser,
                    UnfollowPerson = UnfollowPerson

                });
            }

            return Ok();
        }

        [HttpGet]
        [Route("[action]")]
        public IActionResult GetCircle()
        {
            string ConnStr = GetDbConnString();
            string LoggedInUser = GetUserAuth0ID();
            List<YourCircle> yourCircle = new List<YourCircle>();
            using (IDbConnection db = new SqlConnection(ConnStr))
            {

                string SqlStr = @"select FollowingAuth0ID, FullName from SM_Follow_Following_Table FollowTbl
                                inner join SM_account_info AcctInfo
                                on FollowTbl.FollowingAuth0ID = AcctInfo.Auth0ID 
                                where FollwerAuth0ID = @FollwerAuth0ID";
                yourCircle = db.Query<YourCircle>(SqlStr, new { FollwerAuth0ID = new DbString { Value = LoggedInUser, IsFixedLength = false, IsAnsi = true } }).ToList();



            }


            return Ok(yourCircle);
        }

        [HttpGet]
        [Route("[action]")]
        public IActionResult GetAzureStorageToken()
        {
            string Key = _config["AzureStorageKey"];
            StorageSharedKeyCredential sharedKeyCredentials = new StorageSharedKeyCredential("<shellstorage123>", Key);
            AccountSasBuilder sasBuilder = new AccountSasBuilder()
            {
                StartsOn = DateTimeOffset.UtcNow,
                ExpiresOn = DateTimeOffset.UtcNow.AddMinutes(5),
                Services = AccountSasServices.Blobs,
                ResourceTypes = AccountSasResourceTypes.All,
                Protocol = SasProtocol.Https
            };
            sasBuilder.SetPermissions(AccountSasPermissions.All);
            string sasToken = sasBuilder.ToSasQueryParameters(sharedKeyCredentials).ToString();
            return Ok(sasToken);
        }


        