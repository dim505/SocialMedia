



        /* *******************PEOPLE SECTION ***************************************/

        [HttpGet]
        [Route("[action]")]
        public IActionResult FindPeople()
        {
            string ConnStr = GetDbConnString();
            string LoggedInUser = GetUserAuth0ID();
            List<FindPeople> findPeoples = new List<FindPeople>();
            using (IDbConnection db = new SqlConnection(ConnStr))
            {
                string SqlStr = @"select top 30 FullName, Auth0ID from SM_Account_Info ORDER BY NEWID()";
                findPeoples = db.Query<FindPeople>(SqlStr).ToList();
            };

            return Ok(findPeoples);
        }


        [HttpPost]
        [Route("[action]/{PersonToFollow}")]
        public IActionResult FollowPerson([FromRoute] string PersonToFollow)
        {
            string ConnStr = GetDbConnString();
            string LoggedInUser = GetUserAuth0ID();
            using (IDbConnection db = new SqlConnection(ConnStr))
            {
                string SqlStr = @"insert into SM_Follow_Following_Table values (@FollowerAuth0ID, @FollowingAuth0ID, @DateFollowed, @UserNotified)";
                int result = db.Execute(SqlStr, new
                {
                    FollowerAuth0ID = LoggedInUser,
                    FollowingAuth0ID = PersonToFollow,
                    DateFollowed = DateTime.Now.ToString(),
                    UserNotified = 'N'
                }

                    );
            }
            return Ok();
        }


        [HttpDelete]
        [Route("[action]/{UnfollowPerson}")]
        public IActionResult DeleteFollowPerson([FromRoute] string UnfollowPerson)
        {
            string ConnStr = GetDbConnString();
            string LoggedInUser = GetUserAuth0ID();
            using (IDbConnection db = new SqlConnection(ConnStr))
            {
                string SqlStr = @"Delete from SM_Follow_Following_Table where FollowerAuth0ID = @LoggedInUser and FollowingAuth0ID = @UnfollowPerson";
                int result = db.Execute(SqlStr, new
                {
                    LoggedInUser = LoggedInUser,
                    UnfollowPerson = UnfollowPerson

                });
            }

            return Ok();
        }

        [HttpGet]
        [Route("[action]")]
        public IActionResult GetCircle()
        {
            string ConnStr = GetDbConnString();
            string LoggedInUser = GetUserAuth0ID();
            List<YourCircle> yourCircle = new List<YourCircle>();
            using (IDbConnection db = new SqlConnection(ConnStr))
            {

                string SqlStr = @"select FollowingAuth0ID, FullName from SM_Follow_Following_Table FollowTbl
                                inner join SM_account_info AcctInfo
                                on FollowTbl.FollowingAuth0ID = AcctInfo.Auth0ID 
                                where FollwerAuth0ID = @FollwerAuth0ID";
                yourCircle = db.Query<YourCircle>(SqlStr, new { FollwerAuth0ID = new DbString { Value = LoggedInUser, IsFixedLength = false, IsAnsi = true } }).ToList();



            }


            return Ok(yourCircle);
        }

        [HttpGet]
        [Route("[action]")]
        public IActionResult GetAzureStorageToken()
        {
            string Key = _config["AzureStorageKey"];
            StorageSharedKeyCredential sharedKeyCredentials = new StorageSharedKeyCredential("<shellstorage123>", Key);
            AccountSasBuilder sasBuilder = new AccountSasBuilder()
            {
                StartsOn = DateTimeOffset.UtcNow,
                ExpiresOn = DateTimeOffset.UtcNow.AddMinutes(5),
                Services = AccountSasServices.Blobs,
                ResourceTypes = AccountSasResourceTypes.All,
                Protocol = SasProtocol.Https
            };
            sasBuilder.SetPermissions(AccountSasPermissions.All);
            string sasToken = sasBuilder.ToSasQueryParameters(sharedKeyCredentials).ToString();
            return Ok(sasToken);
        }


        